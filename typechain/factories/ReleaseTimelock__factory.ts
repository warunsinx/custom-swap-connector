/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ReleaseTimelock,
  ReleaseTimelockInterface,
} from "../ReleaseTimelock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "releaseTime_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "releaseTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516100fe3803806100fe83398101604081905261002f91610037565b608052610050565b60006020828403121561004957600080fd5b5051919050565b60805160966100686000396000602f015260966000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063b91d400114602d575b600080fd5b7f000000000000000000000000000000000000000000000000000000000000000060405190815260200160405180910390f3fea2646970667358221220651e8c182ad5a1298c5a9bbe67a087cf88a2d74925e2a44641416b863d69e7d964736f6c634300080b0033";

export class ReleaseTimelock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    releaseTime_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ReleaseTimelock> {
    return super.deploy(
      releaseTime_,
      overrides || {}
    ) as Promise<ReleaseTimelock>;
  }
  getDeployTransaction(
    releaseTime_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(releaseTime_, overrides || {});
  }
  attach(address: string): ReleaseTimelock {
    return super.attach(address) as ReleaseTimelock;
  }
  connect(signer: Signer): ReleaseTimelock__factory {
    return super.connect(signer) as ReleaseTimelock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReleaseTimelockInterface {
    return new utils.Interface(_abi) as ReleaseTimelockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReleaseTimelock {
    return new Contract(address, _abi, signerOrProvider) as ReleaseTimelock;
  }
}
