/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface YESVaultInterface extends ethers.utils.Interface {
  functions: {
    "PROJECT()": FunctionFragment;
    "acceptSuperAdmin()": FunctionFragment;
    "admin()": FunctionFragment;
    "airdrop(address,uint256)": FunctionFragment;
    "borrowLimitOf(address)": FunctionFragment;
    "callHelper()": FunctionFragment;
    "controller()": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "market()": FunctionFragment;
    "marketImpl()": FunctionFragment;
    "pendingSuperAdmin()": FunctionFragment;
    "releaseTime()": FunctionFragment;
    "releasedTo(address)": FunctionFragment;
    "sellMarket(address,uint256,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setBorrowLimit(address,uint256)": FunctionFragment;
    "setCallHelper(address)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setMarket(address)": FunctionFragment;
    "setMarketImpl(address)": FunctionFragment;
    "setPendingSuperAdmin(address)": FunctionFragment;
    "superAdmin()": FunctionFragment;
    "tokensOf(address)": FunctionFragment;
    "totalAllocated()": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "yesToken()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PROJECT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptSuperAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "airdrop",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowLimitOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "callHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingSuperAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "releasedTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sellMarket",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBorrowLimit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallHelper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setMarket", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMarketImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingSuperAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "superAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokensOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalAllocated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "yesToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "PROJECT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "airdrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowLimitOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callHelper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketImpl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "releasedTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCallHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMarketImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "superAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokensOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yesToken", data: BytesLike): Result;

  events: {
    "Airdrop(address,uint256)": EventFragment;
    "BorrowLimitUpdated(address,uint256,uint256)": EventFragment;
    "CallHelperSet(address,address)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "NewAdmin(address,address)": EventFragment;
    "NewController(address,address)": EventFragment;
    "NewMarket(address,address)": EventFragment;
    "NewMarketImpl(address,address)": EventFragment;
    "NewPendingSuperAdmin(address)": EventFragment;
    "NewSlippageTolerrance(uint256,uint256)": EventFragment;
    "NewSuperAdmin(address)": EventFragment;
    "NewYESToken(address,address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Airdrop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallHelperSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMarket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMarketImpl"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingSuperAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSlippageTolerrance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSuperAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewYESToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AirdropEvent = TypedEvent<
  [string, BigNumber] & { beneficiary: string; amount: BigNumber }
>;

export type BorrowLimitUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    oldAmount: BigNumber;
    newAmount: BigNumber;
  }
>;

export type CallHelperSetEvent = TypedEvent<
  [string, string] & { oldCallHelper: string; newCallHelper: string }
>;

export type DepositEvent = TypedEvent<
  [string, BigNumber] & { sender: string; amount: BigNumber }
>;

export type NewAdminEvent = TypedEvent<
  [string, string] & { oldAdmin: string; newAdmin: string }
>;

export type NewControllerEvent = TypedEvent<
  [string, string] & { oldController: string; newController: string }
>;

export type NewMarketEvent = TypedEvent<
  [string, string] & { oldMarket: string; newMarket: string }
>;

export type NewMarketImplEvent = TypedEvent<
  [string, string] & { oldMarketImpl: string; newMarketImpl: string }
>;

export type NewPendingSuperAdminEvent = TypedEvent<
  [string] & { pendingSuperAdmin: string }
>;

export type NewSlippageTolerranceEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldTolerrance: BigNumber;
    newTolerrance: BigNumber;
  }
>;

export type NewSuperAdminEvent = TypedEvent<[string] & { superAdmin: string }>;

export type NewYESTokenEvent = TypedEvent<
  [string, string] & { oldYESToken: string; newYESToken: string }
>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber] & { sender: string; amount: BigNumber }
>;

export class YESVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: YESVaultInterface;

  functions: {
    PROJECT(overrides?: CallOverrides): Promise<[string]>;

    acceptSuperAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    airdrop(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowLimitOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    callHelper(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    market(overrides?: CallOverrides): Promise<[string]>;

    marketImpl(overrides?: CallOverrides): Promise<[string]>;

    pendingSuperAdmin(overrides?: CallOverrides): Promise<[string]>;

    releaseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    releasedTo(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sellMarket(
      borrower: string,
      sellAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBorrowLimit(
      account: string,
      newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCallHelper(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setController(
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarket(
      newMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketImpl(
      newImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPendingSuperAdmin(
      _pendingSuperAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    superAdmin(overrides?: CallOverrides): Promise<[string]>;

    tokensOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocated(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yesToken(overrides?: CallOverrides): Promise<[string]>;
  };

  PROJECT(overrides?: CallOverrides): Promise<string>;

  acceptSuperAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  airdrop(
    beneficiary: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowLimitOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  callHelper(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  deposit(
    amount: BigNumberish,
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  market(overrides?: CallOverrides): Promise<string>;

  marketImpl(overrides?: CallOverrides): Promise<string>;

  pendingSuperAdmin(overrides?: CallOverrides): Promise<string>;

  releaseTime(overrides?: CallOverrides): Promise<BigNumber>;

  releasedTo(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  sellMarket(
    borrower: string,
    sellAmount: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBorrowLimit(
    account: string,
    newAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCallHelper(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setController(
    newController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarket(
    newMarket: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketImpl(
    newImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPendingSuperAdmin(
    _pendingSuperAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  superAdmin(overrides?: CallOverrides): Promise<string>;

  tokensOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocated(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yesToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PROJECT(overrides?: CallOverrides): Promise<string>;

    acceptSuperAdmin(overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    airdrop(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowLimitOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callHelper(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    deposit(
      amount: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    market(overrides?: CallOverrides): Promise<string>;

    marketImpl(overrides?: CallOverrides): Promise<string>;

    pendingSuperAdmin(overrides?: CallOverrides): Promise<string>;

    releaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    releasedTo(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    sellMarket(
      borrower: string,
      sellAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    setBorrowLimit(
      account: string,
      newAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCallHelper(_addr: string, overrides?: CallOverrides): Promise<void>;

    setController(
      newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarket(newMarket: string, overrides?: CallOverrides): Promise<void>;

    setMarketImpl(newImpl: string, overrides?: CallOverrides): Promise<void>;

    setPendingSuperAdmin(
      _pendingSuperAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    superAdmin(overrides?: CallOverrides): Promise<string>;

    tokensOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    yesToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Airdrop(address,uint256)"(
      beneficiary?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;

    Airdrop(
      beneficiary?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;

    "BorrowLimitUpdated(address,uint256,uint256)"(
      account?: null,
      oldAmount?: null,
      newAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; oldAmount: BigNumber; newAmount: BigNumber }
    >;

    BorrowLimitUpdated(
      account?: null,
      oldAmount?: null,
      newAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; oldAmount: BigNumber; newAmount: BigNumber }
    >;

    "CallHelperSet(address,address)"(
      oldCallHelper?: null,
      newCallHelper?: null
    ): TypedEventFilter<
      [string, string],
      { oldCallHelper: string; newCallHelper: string }
    >;

    CallHelperSet(
      oldCallHelper?: null,
      newCallHelper?: null
    ): TypedEventFilter<
      [string, string],
      { oldCallHelper: string; newCallHelper: string }
    >;

    "Deposit(address,uint256)"(
      sender?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    Deposit(
      sender?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    "NewAdmin(address,address)"(
      oldAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { oldAdmin: string; newAdmin: string }
    >;

    NewAdmin(
      oldAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { oldAdmin: string; newAdmin: string }
    >;

    "NewController(address,address)"(
      oldController?: null,
      newController?: null
    ): TypedEventFilter<
      [string, string],
      { oldController: string; newController: string }
    >;

    NewController(
      oldController?: null,
      newController?: null
    ): TypedEventFilter<
      [string, string],
      { oldController: string; newController: string }
    >;

    "NewMarket(address,address)"(
      oldMarket?: null,
      newMarket?: null
    ): TypedEventFilter<
      [string, string],
      { oldMarket: string; newMarket: string }
    >;

    NewMarket(
      oldMarket?: null,
      newMarket?: null
    ): TypedEventFilter<
      [string, string],
      { oldMarket: string; newMarket: string }
    >;

    "NewMarketImpl(address,address)"(
      oldMarketImpl?: null,
      newMarketImpl?: null
    ): TypedEventFilter<
      [string, string],
      { oldMarketImpl: string; newMarketImpl: string }
    >;

    NewMarketImpl(
      oldMarketImpl?: null,
      newMarketImpl?: null
    ): TypedEventFilter<
      [string, string],
      { oldMarketImpl: string; newMarketImpl: string }
    >;

    "NewPendingSuperAdmin(address)"(
      pendingSuperAdmin?: null
    ): TypedEventFilter<[string], { pendingSuperAdmin: string }>;

    NewPendingSuperAdmin(
      pendingSuperAdmin?: null
    ): TypedEventFilter<[string], { pendingSuperAdmin: string }>;

    "NewSlippageTolerrance(uint256,uint256)"(
      oldTolerrance?: null,
      newTolerrance?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldTolerrance: BigNumber; newTolerrance: BigNumber }
    >;

    NewSlippageTolerrance(
      oldTolerrance?: null,
      newTolerrance?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldTolerrance: BigNumber; newTolerrance: BigNumber }
    >;

    "NewSuperAdmin(address)"(
      superAdmin?: null
    ): TypedEventFilter<[string], { superAdmin: string }>;

    NewSuperAdmin(
      superAdmin?: null
    ): TypedEventFilter<[string], { superAdmin: string }>;

    "NewYESToken(address,address)"(
      oldYESToken?: null,
      newYESToken?: null
    ): TypedEventFilter<
      [string, string],
      { oldYESToken: string; newYESToken: string }
    >;

    NewYESToken(
      oldYESToken?: null,
      newYESToken?: null
    ): TypedEventFilter<
      [string, string],
      { oldYESToken: string; newYESToken: string }
    >;

    "Withdraw(address,uint256)"(
      sender?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    Withdraw(
      sender?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    PROJECT(overrides?: CallOverrides): Promise<BigNumber>;

    acceptSuperAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    airdrop(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowLimitOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callHelper(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    marketImpl(overrides?: CallOverrides): Promise<BigNumber>;

    pendingSuperAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    releaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    releasedTo(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    sellMarket(
      borrower: string,
      sellAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBorrowLimit(
      account: string,
      newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCallHelper(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setController(
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarket(
      newMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketImpl(
      newImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPendingSuperAdmin(
      _pendingSuperAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    superAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    tokensOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yesToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PROJECT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptSuperAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airdrop(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowLimitOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingSuperAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releasedTo(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellMarket(
      borrower: string,
      sellAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowLimit(
      account: string,
      newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCallHelper(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarket(
      newMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketImpl(
      newImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPendingSuperAdmin(
      _pendingSuperAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    superAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAllocated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yesToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
