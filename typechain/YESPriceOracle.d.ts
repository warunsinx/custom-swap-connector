/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface YESPriceOracleInterface extends ethers.utils.Interface {
  functions: {
    "getLatestPrice(address)": FunctionFragment;
    "getYESPrice()": FunctionFragment;
    "isPriceOracle()": FunctionFragment;
    "stableCoins(uint256)": FunctionFragment;
    "swapOracle()": FunctionFragment;
    "yesToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getLatestPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getYESPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableCoins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "yesToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYESPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yesToken", data: BytesLike): Result;

  events: {
    "StableCoinAdded(address,uint256)": EventFragment;
    "StableCoinRemoved(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StableCoinAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableCoinRemoved"): EventFragment;
}

export type StableCoinAddedEvent = TypedEvent<
  [string, BigNumber] & { stableCoin: string; index: BigNumber }
>;

export type StableCoinRemovedEvent = TypedEvent<
  [string, BigNumber] & { stableCoin: string; index: BigNumber }
>;

export class YESPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: YESPriceOracleInterface;

  functions: {
    getLatestPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getYESPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    isPriceOracle(overrides?: CallOverrides): Promise<[boolean]>;

    stableCoins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    swapOracle(overrides?: CallOverrides): Promise<[string]>;

    yesToken(overrides?: CallOverrides): Promise<[string]>;
  };

  getLatestPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getYESPrice(overrides?: CallOverrides): Promise<BigNumber>;

  isPriceOracle(overrides?: CallOverrides): Promise<boolean>;

  stableCoins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  swapOracle(overrides?: CallOverrides): Promise<string>;

  yesToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getLatestPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYESPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isPriceOracle(overrides?: CallOverrides): Promise<boolean>;

    stableCoins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    swapOracle(overrides?: CallOverrides): Promise<string>;

    yesToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "StableCoinAdded(address,uint256)"(
      stableCoin?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { stableCoin: string; index: BigNumber }
    >;

    StableCoinAdded(
      stableCoin?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { stableCoin: string; index: BigNumber }
    >;

    "StableCoinRemoved(address,uint256)"(
      stableCoin?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { stableCoin: string; index: BigNumber }
    >;

    StableCoinRemoved(
      stableCoin?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { stableCoin: string; index: BigNumber }
    >;
  };

  estimateGas: {
    getLatestPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYESPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    stableCoins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOracle(overrides?: CallOverrides): Promise<BigNumber>;

    yesToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getLatestPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYESPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableCoins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yesToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
