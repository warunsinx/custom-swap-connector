/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestAdminKAP20RouterInterface extends ethers.utils.Interface {
  functions: {
    "KKUB()": FunctionFragment;
    "KYC()": FunctionFragment;
    "PROJECT()": FunctionFragment;
    "addAddress(address)": FunctionFragment;
    "adminRouter()": FunctionFragment;
    "allowedAddrByIndex(uint256)": FunctionFragment;
    "allowedAddrByPage(uint256,uint256)": FunctionFragment;
    "allowedAddrLength()": FunctionFragment;
    "bitkubNextLevel()": FunctionFragment;
    "committee()": FunctionFragment;
    "externalTransfer(address,address,address,address,uint256,uint256)": FunctionFragment;
    "externalTransferKKUB(address,address,address,uint256,uint256)": FunctionFragment;
    "externalTransferKKUBToKUB(address,address,address,uint256,uint256)": FunctionFragment;
    "feeTo()": FunctionFragment;
    "internalTransfer(address,address,address,address,uint256,uint256)": FunctionFragment;
    "internalTransferKKUB(address,address,address,uint256,uint256)": FunctionFragment;
    "isAllowedAddr(address)": FunctionFragment;
    "revokeAddress(address)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setBitkubNextLevel(uint256)": FunctionFragment;
    "setCommittee(address)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setKKUB(address)": FunctionFragment;
    "setKYC(address)": FunctionFragment;
    "withdrawKUB(address,uint256)": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "KKUB", values?: undefined): string;
  encodeFunctionData(functionFragment: "KYC", values?: undefined): string;
  encodeFunctionData(functionFragment: "PROJECT", values?: undefined): string;
  encodeFunctionData(functionFragment: "addAddress", values: [string]): string;
  encodeFunctionData(
    functionFragment: "adminRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAddrByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAddrByPage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAddrLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bitkubNextLevel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "committee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "externalTransfer",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "externalTransferKKUB",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "externalTransferKKUBToKUB",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "internalTransfer",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "internalTransferKKUB",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBitkubNextLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommittee",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(functionFragment: "setKKUB", values: [string]): string;
  encodeFunctionData(functionFragment: "setKYC", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawKUB",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "KKUB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KYC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PROJECT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedAddrByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedAddrByPage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedAddrLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bitkubNextLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "committee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "externalTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalTransferKKUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalTransferKKUBToKUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "internalTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "internalTransferKKUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBitkubNextLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommittee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKKUB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKYC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawKUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "ExternalTokenTransfer(address,address,address,uint256)": EventFragment;
    "FeeTransfer(address,address,address,uint256)": EventFragment;
    "InternalTokenTransfer(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExternalTokenTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InternalTokenTransfer"): EventFragment;
}

export type ExternalTokenTransferEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _token: string;
    _from: string;
    _to: string;
    _amount: BigNumber;
  }
>;

export type FeeTransferEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _token: string;
    _from: string;
    _to: string;
    _amount: BigNumber;
  }
>;

export type InternalTokenTransferEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    _token: string;
    _from: string;
    _to: string;
    _amount: BigNumber;
  }
>;

export class TestAdminKAP20Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestAdminKAP20RouterInterface;

  functions: {
    KKUB(overrides?: CallOverrides): Promise<[string]>;

    KYC(overrides?: CallOverrides): Promise<[string]>;

    PROJECT(overrides?: CallOverrides): Promise<[string]>;

    addAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminRouter(overrides?: CallOverrides): Promise<[string]>;

    allowedAddrByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowedAddrByPage(
      _page: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    allowedAddrLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    bitkubNextLevel(overrides?: CallOverrides): Promise<[BigNumber]>;

    committee(overrides?: CallOverrides): Promise<[string]>;

    externalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    externalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    externalTransferKKUBToKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    internalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    internalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllowedAddr(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    revokeAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _adminRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBitkubNextLevel(
      _bitkubNextLevel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCommittee(
      _committee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKKUB(
      _KKUB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKYC(
      _KYC: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawKUB(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  KKUB(overrides?: CallOverrides): Promise<string>;

  KYC(overrides?: CallOverrides): Promise<string>;

  PROJECT(overrides?: CallOverrides): Promise<string>;

  addAddress(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminRouter(overrides?: CallOverrides): Promise<string>;

  allowedAddrByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allowedAddrByPage(
    _page: BigNumberish,
    _limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  allowedAddrLength(overrides?: CallOverrides): Promise<BigNumber>;

  bitkubNextLevel(overrides?: CallOverrides): Promise<BigNumber>;

  committee(overrides?: CallOverrides): Promise<string>;

  externalTransfer(
    _token: string,
    _feeToken: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _feeValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  externalTransferKKUB(
    _feeToken: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _feeValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  externalTransferKKUBToKUB(
    _feeToken: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _feeValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  internalTransfer(
    _token: string,
    _feeToken: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _feeValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  internalTransferKKUB(
    _feeToken: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _feeValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllowedAddr(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  revokeAddress(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _adminRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBitkubNextLevel(
    _bitkubNextLevel: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCommittee(
    _committee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeTo(
    _feeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKKUB(
    _KKUB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKYC(
    _KYC: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawKUB(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    KKUB(overrides?: CallOverrides): Promise<string>;

    KYC(overrides?: CallOverrides): Promise<string>;

    PROJECT(overrides?: CallOverrides): Promise<string>;

    addAddress(_addr: string, overrides?: CallOverrides): Promise<void>;

    adminRouter(overrides?: CallOverrides): Promise<string>;

    allowedAddrByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allowedAddrByPage(
      _page: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    allowedAddrLength(overrides?: CallOverrides): Promise<BigNumber>;

    bitkubNextLevel(overrides?: CallOverrides): Promise<BigNumber>;

    committee(overrides?: CallOverrides): Promise<string>;

    externalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    externalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    externalTransferKKUBToKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    internalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    internalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllowedAddr(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    revokeAddress(_addr: string, overrides?: CallOverrides): Promise<void>;

    setAdmin(_adminRouter: string, overrides?: CallOverrides): Promise<void>;

    setBitkubNextLevel(
      _bitkubNextLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommittee(_committee: string, overrides?: CallOverrides): Promise<void>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    setKKUB(_KKUB: string, overrides?: CallOverrides): Promise<void>;

    setKYC(_KYC: string, overrides?: CallOverrides): Promise<void>;

    withdrawKUB(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ExternalTokenTransfer(address,address,address,uint256)"(
      _token?: string | null,
      _from?: string | null,
      _to?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _token: string; _from: string; _to: string; _amount: BigNumber }
    >;

    ExternalTokenTransfer(
      _token?: string | null,
      _from?: string | null,
      _to?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _token: string; _from: string; _to: string; _amount: BigNumber }
    >;

    "FeeTransfer(address,address,address,uint256)"(
      _token?: string | null,
      _from?: null,
      _to?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _token: string; _from: string; _to: string; _amount: BigNumber }
    >;

    FeeTransfer(
      _token?: string | null,
      _from?: null,
      _to?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _token: string; _from: string; _to: string; _amount: BigNumber }
    >;

    "InternalTokenTransfer(address,address,address,uint256)"(
      _token?: string | null,
      _from?: string | null,
      _to?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _token: string; _from: string; _to: string; _amount: BigNumber }
    >;

    InternalTokenTransfer(
      _token?: string | null,
      _from?: string | null,
      _to?: string | null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { _token: string; _from: string; _to: string; _amount: BigNumber }
    >;
  };

  estimateGas: {
    KKUB(overrides?: CallOverrides): Promise<BigNumber>;

    KYC(overrides?: CallOverrides): Promise<BigNumber>;

    PROJECT(overrides?: CallOverrides): Promise<BigNumber>;

    addAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminRouter(overrides?: CallOverrides): Promise<BigNumber>;

    allowedAddrByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedAddrByPage(
      _page: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedAddrLength(overrides?: CallOverrides): Promise<BigNumber>;

    bitkubNextLevel(overrides?: CallOverrides): Promise<BigNumber>;

    committee(overrides?: CallOverrides): Promise<BigNumber>;

    externalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    externalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    externalTransferKKUBToKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    internalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    internalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllowedAddr(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    revokeAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _adminRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBitkubNextLevel(
      _bitkubNextLevel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCommittee(
      _committee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKKUB(
      _KKUB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKYC(
      _KYC: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawKUB(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    KKUB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KYC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROJECT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedAddrByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedAddrByPage(
      _page: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedAddrLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bitkubNextLevel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    committee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    externalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    externalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    externalTransferKKUBToKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    internalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    internalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllowedAddr(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _adminRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBitkubNextLevel(
      _bitkubNextLevel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCommittee(
      _committee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKKUB(
      _KKUB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKYC(
      _KYC: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawKUB(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
