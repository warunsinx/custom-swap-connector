/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface KUBLendingInterface extends ethers.utils.Interface {
  functions: {
    "PROJECT()": FunctionFragment;
    "_claimPlatformReserves(uint256)": FunctionFragment;
    "_claimPoolReserves(uint256)": FunctionFragment;
    "_setBeneficiary(address)": FunctionFragment;
    "_setController(address)": FunctionFragment;
    "_setInterestRateModel(address)": FunctionFragment;
    "_setPlatformReserveFactor(uint256)": FunctionFragment;
    "_setPoolReserveFactor(uint256)": FunctionFragment;
    "_setReservePool(address)": FunctionFragment;
    "acceptSuperAdmin()": FunctionFragment;
    "accrualBlockNumber()": FunctionFragment;
    "accrueInterest()": FunctionFragment;
    "balanceOfUnderlying(address)": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "borrow(uint256,address)": FunctionFragment;
    "borrowBalanceCurrent(address)": FunctionFragment;
    "borrowBalanceStored(address)": FunctionFragment;
    "borrowIndex()": FunctionFragment;
    "borrowRatePerBlock()": FunctionFragment;
    "callHelper()": FunctionFragment;
    "controller()": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "exchangeRateCurrent()": FunctionFragment;
    "exchangeRateStored()": FunctionFragment;
    "getAccountSnapshot(address)": FunctionFragment;
    "getCash()": FunctionFragment;
    "interestRateModel()": FunctionFragment;
    "isLContract()": FunctionFragment;
    "lToken()": FunctionFragment;
    "liquidateBorrow(uint256,uint256,uint256,address,address)": FunctionFragment;
    "pause()": FunctionFragment;
    "pendingSuperAdmin()": FunctionFragment;
    "platformReserveFactorMantissa()": FunctionFragment;
    "platformReserves()": FunctionFragment;
    "poolReserveFactorMantissa()": FunctionFragment;
    "poolReserves()": FunctionFragment;
    "protocolSeizeShareMantissa()": FunctionFragment;
    "repayBorrow(uint256,address)": FunctionFragment;
    "repayBorrowBehalf(address,uint256,address)": FunctionFragment;
    "reserveFactorMantissa()": FunctionFragment;
    "reservePool()": FunctionFragment;
    "setCallHelper(address)": FunctionFragment;
    "setPendingSuperAdmin(address)": FunctionFragment;
    "superAdmin()": FunctionFragment;
    "supplyRatePerBlock()": FunctionFragment;
    "totalBorrows()": FunctionFragment;
    "totalBorrowsCurrent()": FunctionFragment;
    "totalReserves()": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "withdrawUnderlying(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PROJECT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_claimPlatformReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_claimPoolReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setInterestRateModel",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPlatformReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPoolReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setReservePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptSuperAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrualBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceCurrent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceStored",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRatePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountSnapshot",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getCash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "interestRateModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrow",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingSuperAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformReserveFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolReserveFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolSeizeShareMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrow",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowBehalf",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCallHelper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingSuperAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "superAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplyRatePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowsCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnderlying",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "PROJECT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_claimPlatformReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_claimPoolReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPlatformReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPoolReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setReservePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrualBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callHelper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformReserveFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolReserveFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolSeizeShareMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCallHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingSuperAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "superAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowsCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnderlying",
    data: BytesLike
  ): Result;

  events: {
    "AccrueInterest(uint256,uint256,uint256,uint256)": EventFragment;
    "Borrow(address,uint256,uint256,uint256)": EventFragment;
    "CallHelperSet(address,address)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "Failure(uint256,uint256,uint256)": EventFragment;
    "LiquidateBorrow(address,address,uint256,uint256)": EventFragment;
    "NewBeneficiary(address,address)": EventFragment;
    "NewController(address,address)": EventFragment;
    "NewMarketInterestRateModel(address,address)": EventFragment;
    "NewPendingSuperAdmin(address)": EventFragment;
    "NewPlatformReserveFactor(uint256,uint256)": EventFragment;
    "NewPoolReserveFactor(uint256,uint256)": EventFragment;
    "NewReservePool(address,address)": EventFragment;
    "NewSlippageTolerrance(uint256,uint256)": EventFragment;
    "NewSuperAdmin(address)": EventFragment;
    "PlatformReservesClaimed(address,uint256,uint256)": EventFragment;
    "PoolReservesClaimed(address,uint256,uint256)": EventFragment;
    "RepayBorrow(address,address,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccrueInterest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallHelperSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Failure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBeneficiary"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMarketInterestRateModel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingSuperAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPlatformReserveFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPoolReserveFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReservePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSlippageTolerrance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSuperAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformReservesClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolReservesClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AccrueInterestEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    cashPrior: BigNumber;
    interestAccumulated: BigNumber;
    borrowIndex: BigNumber;
    totalBorrows: BigNumber;
  }
>;

export type BorrowEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    borrower: string;
    borrowAmount: BigNumber;
    accountBorrows: BigNumber;
    totalBorrows: BigNumber;
  }
>;

export type CallHelperSetEvent = TypedEvent<
  [string, string] & { oldCallHelper: string; newCallHelper: string }
>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    depositAmount: BigNumber;
    mintTokens: BigNumber;
  }
>;

export type FailureEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    error: BigNumber;
    info: BigNumber;
    detail: BigNumber;
  }
>;

export type LiquidateBorrowEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    liquidator: string;
    borrower: string;
    repayAmount: BigNumber;
    seizeTokens: BigNumber;
  }
>;

export type NewBeneficiaryEvent = TypedEvent<
  [string, string] & { oldBeneficiary: string; newBeneficiary: string }
>;

export type NewControllerEvent = TypedEvent<
  [string, string] & { oldController: string; newController: string }
>;

export type NewMarketInterestRateModelEvent = TypedEvent<
  [string, string] & {
    oldInterestRateModel: string;
    newInterestRateModel: string;
  }
>;

export type NewPendingSuperAdminEvent = TypedEvent<
  [string] & { pendingSuperAdmin: string }
>;

export type NewPlatformReserveFactorEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldReserveFactorMantissa: BigNumber;
    newReserveFactorMantissa: BigNumber;
  }
>;

export type NewPoolReserveFactorEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldReserveFactorMantissa: BigNumber;
    newReserveFactorMantissa: BigNumber;
  }
>;

export type NewReservePoolEvent = TypedEvent<
  [string, string] & { oldReservePool: string; newReservePool: string }
>;

export type NewSlippageTolerranceEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    oldSlippageTolerrance: BigNumber;
    newSlippageTolerrance: BigNumber;
  }
>;

export type NewSuperAdminEvent = TypedEvent<[string] & { superAdmin: string }>;

export type PlatformReservesClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    beneficiary: string;
    reduceAmount: BigNumber;
    newTotalReserves: BigNumber;
  }
>;

export type PoolReservesClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    reservePool: string;
    claimedAmount: BigNumber;
    poolReservesNew: BigNumber;
  }
>;

export type RepayBorrowEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    payer: string;
    borrower: string;
    repayAmount: BigNumber;
    accountBorrows: BigNumber;
    totalBorrows: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    withdrawAmount: BigNumber;
    withdrawTokens: BigNumber;
  }
>;

export class KUBLending extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KUBLendingInterface;

  functions: {
    PROJECT(overrides?: CallOverrides): Promise<[string]>;

    _claimPlatformReserves(
      claimedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _claimPoolReserves(
      claimedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setBeneficiary(
      newBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setController(
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setInterestRateModel(
      newInterestRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setPlatformReserveFactor(
      newPlatformReserveFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setPoolReserveFactor(
      newPoolReserveFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setReservePool(
      newReservePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptSuperAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    accrueInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOfUnderlying(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      borrowAmount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowBalanceCurrent(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowBalanceStored(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    callHelper(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      depositAmount: BigNumberish,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeRateCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeRateStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountSnapshot(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getCash(overrides?: CallOverrides): Promise<[BigNumber]>;

    interestRateModel(overrides?: CallOverrides): Promise<[string]>;

    isLContract(overrides?: CallOverrides): Promise<[boolean]>;

    lToken(overrides?: CallOverrides): Promise<[string]>;

    liquidateBorrow(
      input: BigNumberish,
      minReward: BigNumberish,
      deadline: BigNumberish,
      borrower: string,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingSuperAdmin(overrides?: CallOverrides): Promise<[string]>;

    platformReserveFactorMantissa(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    platformReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolReserveFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    repayBorrow(
      repayAmount: BigNumberish,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    reservePool(overrides?: CallOverrides): Promise<[string]>;

    setCallHelper(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPendingSuperAdmin(
      _pendingSuperAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    superAdmin(overrides?: CallOverrides): Promise<[string]>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrows(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrowsCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      withdrawTokens: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUnderlying(
      withdrawAmount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PROJECT(overrides?: CallOverrides): Promise<string>;

  _claimPlatformReserves(
    claimedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _claimPoolReserves(
    claimedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setBeneficiary(
    newBeneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setController(
    newController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setInterestRateModel(
    newInterestRateModel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setPlatformReserveFactor(
    newPlatformReserveFactorMantissa: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setPoolReserveFactor(
    newPoolReserveFactorMantissa: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setReservePool(
    newReservePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptSuperAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  accrueInterest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOfUnderlying(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  borrow(
    borrowAmount: BigNumberish,
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowBalanceCurrent(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowBalanceStored(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

  borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  callHelper(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  deposit(
    depositAmount: BigNumberish,
    sender: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeRateCurrent(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountSnapshot(
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getCash(overrides?: CallOverrides): Promise<BigNumber>;

  interestRateModel(overrides?: CallOverrides): Promise<string>;

  isLContract(overrides?: CallOverrides): Promise<boolean>;

  lToken(overrides?: CallOverrides): Promise<string>;

  liquidateBorrow(
    input: BigNumberish,
    minReward: BigNumberish,
    deadline: BigNumberish,
    borrower: string,
    sender: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingSuperAdmin(overrides?: CallOverrides): Promise<string>;

  platformReserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  platformReserves(overrides?: CallOverrides): Promise<BigNumber>;

  poolReserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  poolReserves(overrides?: CallOverrides): Promise<BigNumber>;

  protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  repayBorrow(
    repayAmount: BigNumberish,
    sender: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayBorrowBehalf(
    borrower: string,
    repayAmount: BigNumberish,
    sender: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  reservePool(overrides?: CallOverrides): Promise<string>;

  setCallHelper(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPendingSuperAdmin(
    _pendingSuperAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  superAdmin(overrides?: CallOverrides): Promise<string>;

  supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrowsCurrent(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    withdrawTokens: BigNumberish,
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUnderlying(
    withdrawAmount: BigNumberish,
    sender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PROJECT(overrides?: CallOverrides): Promise<string>;

    _claimPlatformReserves(
      claimedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _claimPoolReserves(
      claimedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setBeneficiary(
      newBeneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setController(
      newController: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setInterestRateModel(
      newInterestRateModel: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setPlatformReserveFactor(
      newPlatformReserveFactorMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setPoolReserveFactor(
      newPoolReserveFactorMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setReservePool(
      newReservePool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    acceptSuperAdmin(overrides?: CallOverrides): Promise<void>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    accrueInterest(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    borrow(
      borrowAmount: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowBalanceCurrent(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowBalanceStored(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    callHelper(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    deposit(
      depositAmount: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeRateCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountSnapshot(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getCash(overrides?: CallOverrides): Promise<BigNumber>;

    interestRateModel(overrides?: CallOverrides): Promise<string>;

    isLContract(overrides?: CallOverrides): Promise<boolean>;

    lToken(overrides?: CallOverrides): Promise<string>;

    liquidateBorrow(
      input: BigNumberish,
      minReward: BigNumberish,
      deadline: BigNumberish,
      borrower: string,
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<BigNumber>;

    pendingSuperAdmin(overrides?: CallOverrides): Promise<string>;

    platformReserveFactorMantissa(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformReserves(overrides?: CallOverrides): Promise<BigNumber>;

    poolReserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    poolReserves(overrides?: CallOverrides): Promise<BigNumber>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    repayBorrow(
      repayAmount: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    reservePool(overrides?: CallOverrides): Promise<string>;

    setCallHelper(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPendingSuperAdmin(
      _pendingSuperAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    superAdmin(overrides?: CallOverrides): Promise<string>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowsCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      withdrawTokens: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawUnderlying(
      withdrawAmount: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AccrueInterest(uint256,uint256,uint256,uint256)"(
      cashPrior?: null,
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        cashPrior: BigNumber;
        interestAccumulated: BigNumber;
        borrowIndex: BigNumber;
        totalBorrows: BigNumber;
      }
    >;

    AccrueInterest(
      cashPrior?: null,
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        cashPrior: BigNumber;
        interestAccumulated: BigNumber;
        borrowIndex: BigNumber;
        totalBorrows: BigNumber;
      }
    >;

    "Borrow(address,uint256,uint256,uint256)"(
      borrower?: null,
      borrowAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        borrower: string;
        borrowAmount: BigNumber;
        accountBorrows: BigNumber;
        totalBorrows: BigNumber;
      }
    >;

    Borrow(
      borrower?: null,
      borrowAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        borrower: string;
        borrowAmount: BigNumber;
        accountBorrows: BigNumber;
        totalBorrows: BigNumber;
      }
    >;

    "CallHelperSet(address,address)"(
      oldCallHelper?: null,
      newCallHelper?: null
    ): TypedEventFilter<
      [string, string],
      { oldCallHelper: string; newCallHelper: string }
    >;

    CallHelperSet(
      oldCallHelper?: null,
      newCallHelper?: null
    ): TypedEventFilter<
      [string, string],
      { oldCallHelper: string; newCallHelper: string }
    >;

    "Deposit(address,uint256,uint256)"(
      user?: null,
      depositAmount?: null,
      mintTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; depositAmount: BigNumber; mintTokens: BigNumber }
    >;

    Deposit(
      user?: null,
      depositAmount?: null,
      mintTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; depositAmount: BigNumber; mintTokens: BigNumber }
    >;

    "Failure(uint256,uint256,uint256)"(
      error?: null,
      info?: null,
      detail?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { error: BigNumber; info: BigNumber; detail: BigNumber }
    >;

    Failure(
      error?: null,
      info?: null,
      detail?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { error: BigNumber; info: BigNumber; detail: BigNumber }
    >;

    "LiquidateBorrow(address,address,uint256,uint256)"(
      liquidator?: null,
      borrower?: null,
      repayAmount?: null,
      seizeTokens?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        liquidator: string;
        borrower: string;
        repayAmount: BigNumber;
        seizeTokens: BigNumber;
      }
    >;

    LiquidateBorrow(
      liquidator?: null,
      borrower?: null,
      repayAmount?: null,
      seizeTokens?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        liquidator: string;
        borrower: string;
        repayAmount: BigNumber;
        seizeTokens: BigNumber;
      }
    >;

    "NewBeneficiary(address,address)"(
      oldBeneficiary?: null,
      newBeneficiary?: null
    ): TypedEventFilter<
      [string, string],
      { oldBeneficiary: string; newBeneficiary: string }
    >;

    NewBeneficiary(
      oldBeneficiary?: null,
      newBeneficiary?: null
    ): TypedEventFilter<
      [string, string],
      { oldBeneficiary: string; newBeneficiary: string }
    >;

    "NewController(address,address)"(
      oldController?: null,
      newController?: null
    ): TypedEventFilter<
      [string, string],
      { oldController: string; newController: string }
    >;

    NewController(
      oldController?: null,
      newController?: null
    ): TypedEventFilter<
      [string, string],
      { oldController: string; newController: string }
    >;

    "NewMarketInterestRateModel(address,address)"(
      oldInterestRateModel?: null,
      newInterestRateModel?: null
    ): TypedEventFilter<
      [string, string],
      { oldInterestRateModel: string; newInterestRateModel: string }
    >;

    NewMarketInterestRateModel(
      oldInterestRateModel?: null,
      newInterestRateModel?: null
    ): TypedEventFilter<
      [string, string],
      { oldInterestRateModel: string; newInterestRateModel: string }
    >;

    "NewPendingSuperAdmin(address)"(
      pendingSuperAdmin?: null
    ): TypedEventFilter<[string], { pendingSuperAdmin: string }>;

    NewPendingSuperAdmin(
      pendingSuperAdmin?: null
    ): TypedEventFilter<[string], { pendingSuperAdmin: string }>;

    "NewPlatformReserveFactor(uint256,uint256)"(
      oldReserveFactorMantissa?: null,
      newReserveFactorMantissa?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        oldReserveFactorMantissa: BigNumber;
        newReserveFactorMantissa: BigNumber;
      }
    >;

    NewPlatformReserveFactor(
      oldReserveFactorMantissa?: null,
      newReserveFactorMantissa?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        oldReserveFactorMantissa: BigNumber;
        newReserveFactorMantissa: BigNumber;
      }
    >;

    "NewPoolReserveFactor(uint256,uint256)"(
      oldReserveFactorMantissa?: null,
      newReserveFactorMantissa?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        oldReserveFactorMantissa: BigNumber;
        newReserveFactorMantissa: BigNumber;
      }
    >;

    NewPoolReserveFactor(
      oldReserveFactorMantissa?: null,
      newReserveFactorMantissa?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        oldReserveFactorMantissa: BigNumber;
        newReserveFactorMantissa: BigNumber;
      }
    >;

    "NewReservePool(address,address)"(
      oldReservePool?: null,
      newReservePool?: null
    ): TypedEventFilter<
      [string, string],
      { oldReservePool: string; newReservePool: string }
    >;

    NewReservePool(
      oldReservePool?: null,
      newReservePool?: null
    ): TypedEventFilter<
      [string, string],
      { oldReservePool: string; newReservePool: string }
    >;

    "NewSlippageTolerrance(uint256,uint256)"(
      oldSlippageTolerrance?: null,
      newSlippageTolerrance?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldSlippageTolerrance: BigNumber; newSlippageTolerrance: BigNumber }
    >;

    NewSlippageTolerrance(
      oldSlippageTolerrance?: null,
      newSlippageTolerrance?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldSlippageTolerrance: BigNumber; newSlippageTolerrance: BigNumber }
    >;

    "NewSuperAdmin(address)"(
      superAdmin?: null
    ): TypedEventFilter<[string], { superAdmin: string }>;

    NewSuperAdmin(
      superAdmin?: null
    ): TypedEventFilter<[string], { superAdmin: string }>;

    "PlatformReservesClaimed(address,uint256,uint256)"(
      beneficiary?: null,
      reduceAmount?: null,
      newTotalReserves?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        beneficiary: string;
        reduceAmount: BigNumber;
        newTotalReserves: BigNumber;
      }
    >;

    PlatformReservesClaimed(
      beneficiary?: null,
      reduceAmount?: null,
      newTotalReserves?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        beneficiary: string;
        reduceAmount: BigNumber;
        newTotalReserves: BigNumber;
      }
    >;

    "PoolReservesClaimed(address,uint256,uint256)"(
      reservePool?: null,
      claimedAmount?: null,
      poolReservesNew?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        reservePool: string;
        claimedAmount: BigNumber;
        poolReservesNew: BigNumber;
      }
    >;

    PoolReservesClaimed(
      reservePool?: null,
      claimedAmount?: null,
      poolReservesNew?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        reservePool: string;
        claimedAmount: BigNumber;
        poolReservesNew: BigNumber;
      }
    >;

    "RepayBorrow(address,address,uint256,uint256,uint256)"(
      payer?: null,
      borrower?: null,
      repayAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        payer: string;
        borrower: string;
        repayAmount: BigNumber;
        accountBorrows: BigNumber;
        totalBorrows: BigNumber;
      }
    >;

    RepayBorrow(
      payer?: null,
      borrower?: null,
      repayAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        payer: string;
        borrower: string;
        repayAmount: BigNumber;
        accountBorrows: BigNumber;
        totalBorrows: BigNumber;
      }
    >;

    "Withdraw(address,uint256,uint256)"(
      user?: null,
      withdrawAmount?: null,
      withdrawTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; withdrawAmount: BigNumber; withdrawTokens: BigNumber }
    >;

    Withdraw(
      user?: null,
      withdrawAmount?: null,
      withdrawTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; withdrawAmount: BigNumber; withdrawTokens: BigNumber }
    >;
  };

  estimateGas: {
    PROJECT(overrides?: CallOverrides): Promise<BigNumber>;

    _claimPlatformReserves(
      claimedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _claimPoolReserves(
      claimedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setBeneficiary(
      newBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setController(
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setInterestRateModel(
      newInterestRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setPlatformReserveFactor(
      newPlatformReserveFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setPoolReserveFactor(
      newPoolReserveFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setReservePool(
      newReservePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptSuperAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    accrueInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOfUnderlying(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      borrowAmount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowBalanceCurrent(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowBalanceStored(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    callHelper(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      depositAmount: BigNumberish,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeRateCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountSnapshot(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCash(overrides?: CallOverrides): Promise<BigNumber>;

    interestRateModel(overrides?: CallOverrides): Promise<BigNumber>;

    isLContract(overrides?: CallOverrides): Promise<BigNumber>;

    lToken(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrow(
      input: BigNumberish,
      minReward: BigNumberish,
      deadline: BigNumberish,
      borrower: string,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingSuperAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    platformReserveFactorMantissa(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformReserves(overrides?: CallOverrides): Promise<BigNumber>;

    poolReserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    poolReserves(overrides?: CallOverrides): Promise<BigNumber>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    repayBorrow(
      repayAmount: BigNumberish,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    reservePool(overrides?: CallOverrides): Promise<BigNumber>;

    setCallHelper(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPendingSuperAdmin(
      _pendingSuperAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    superAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowsCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      withdrawTokens: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUnderlying(
      withdrawAmount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PROJECT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _claimPlatformReserves(
      claimedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _claimPoolReserves(
      claimedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setBeneficiary(
      newBeneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setController(
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setInterestRateModel(
      newInterestRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setPlatformReserveFactor(
      newPlatformReserveFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setPoolReserveFactor(
      newPoolReserveFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setReservePool(
      newReservePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptSuperAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accrualBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accrueInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfUnderlying(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      borrowAmount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowBalanceCurrent(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowBalanceStored(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowRatePerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      depositAmount: BigNumberish,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRateCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRateStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountSnapshot(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrow(
      input: BigNumberish,
      minReward: BigNumberish,
      deadline: BigNumberish,
      borrower: string,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingSuperAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformReserveFactorMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    platformReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolReserveFactorMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolSeizeShareMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    repayBorrow(
      repayAmount: BigNumberish,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveFactorMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reservePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCallHelper(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPendingSuperAdmin(
      _pendingSuperAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    superAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyRatePerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBorrows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrowsCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      withdrawTokens: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUnderlying(
      withdrawAmount: BigNumberish,
      sender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
