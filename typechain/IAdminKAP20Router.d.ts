/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAdminKAP20RouterInterface extends ethers.utils.Interface {
  functions: {
    "addAddress(address)": FunctionFragment;
    "allowedAddrByIndex(uint256)": FunctionFragment;
    "allowedAddrByPage(uint256,uint256)": FunctionFragment;
    "allowedAddrLength()": FunctionFragment;
    "externalTransfer(address,address,address,address,uint256,uint256)": FunctionFragment;
    "externalTransferKKUB(address,address,address,uint256,uint256)": FunctionFragment;
    "externalTransferKKUBToKUB(address,address,address,uint256,uint256)": FunctionFragment;
    "internalTransfer(address,address,address,address,uint256,uint256)": FunctionFragment;
    "internalTransferKKUB(address,address,address,uint256,uint256)": FunctionFragment;
    "isAllowedAddr(address)": FunctionFragment;
    "revokeAddress(address)": FunctionFragment;
    "setKKUB(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAddress", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowedAddrByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAddrByPage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAddrLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "externalTransfer",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "externalTransferKKUB",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "externalTransferKKUBToKUB",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "internalTransfer",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "internalTransferKKUB",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setKKUB", values: [string]): string;

  decodeFunctionResult(functionFragment: "addAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedAddrByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedAddrByPage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedAddrLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalTransferKKUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalTransferKKUBToKUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "internalTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "internalTransferKKUB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKKUB", data: BytesLike): Result;

  events: {};
}

export class IAdminKAP20Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAdminKAP20RouterInterface;

  functions: {
    addAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowedAddrByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowedAddrByPage(
      _page: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    allowedAddrLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    externalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    externalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    externalTransferKKUBToKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    internalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    internalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllowedAddr(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    revokeAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKKUB(
      _KKUB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAddress(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowedAddrByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  allowedAddrByPage(
    _page: BigNumberish,
    _limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  allowedAddrLength(overrides?: CallOverrides): Promise<BigNumber>;

  externalTransfer(
    _token: string,
    _feeToken: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _feeValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  externalTransferKKUB(
    _feeToken: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _feeValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  externalTransferKKUBToKUB(
    _feeToken: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _feeValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  internalTransfer(
    _token: string,
    _feeToken: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _feeValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  internalTransferKKUB(
    _feeToken: string,
    _from: string,
    _to: string,
    _value: BigNumberish,
    _feeValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllowedAddr(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  revokeAddress(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKKUB(
    _KKUB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAddress(_addr: string, overrides?: CallOverrides): Promise<void>;

    allowedAddrByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allowedAddrByPage(
      _page: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    allowedAddrLength(overrides?: CallOverrides): Promise<BigNumber>;

    externalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    externalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    externalTransferKKUBToKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    internalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    internalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllowedAddr(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    revokeAddress(_addr: string, overrides?: CallOverrides): Promise<void>;

    setKKUB(_KKUB: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowedAddrByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedAddrByPage(
      _page: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedAddrLength(overrides?: CallOverrides): Promise<BigNumber>;

    externalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    externalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    externalTransferKKUBToKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    internalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    internalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllowedAddr(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    revokeAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKKUB(
      _KKUB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowedAddrByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedAddrByPage(
      _page: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedAddrLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    externalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    externalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    externalTransferKKUBToKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    internalTransfer(
      _token: string,
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    internalTransferKKUB(
      _feeToken: string,
      _from: string,
      _to: string,
      _value: BigNumberish,
      _feeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllowedAddr(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeAddress(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKKUB(
      _KKUB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
